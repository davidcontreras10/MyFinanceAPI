// <auto-generated />
using System;
using EFDataAccess.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EFDataAccess.Migrations
{
    [DbContext(typeof(MyFinanceContext))]
    [Migration("20230717053257_TransferRecordPK")]
    partial class TransferRecordPK
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EFDataAccess.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountGroupId")
                        .HasColumnType("int");

                    b.Property<int>("AccountTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<float?>("BaseBudget")
                        .HasColumnType("real");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int?>("DefaultSpendTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("FinancialEntityId")
                        .HasColumnType("int");

                    b.Property<string>("HeaderColor")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("PeriodDefinitionId")
                        .HasColumnType("int");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AccountId");

                    b.HasIndex("AccountGroupId");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DefaultSpendTypeId");

                    b.HasIndex("FinancialEntityId");

                    b.HasIndex("PeriodDefinitionId");

                    b.HasIndex("UserId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("EFDataAccess.Models.AccountGroup", b =>
                {
                    b.Property<int>("AccountGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountGroupName")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int?>("AccountGroupPosition")
                        .HasColumnType("int");

                    b.Property<bool?>("DisplayDefault")
                        .HasColumnType("bit");

                    b.Property<string>("DisplayValue")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AccountGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("AccountGroup");
                });

            modelBuilder.Entity("EFDataAccess.Models.AccountInclude", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("AccountIncludeId")
                        .HasColumnType("int");

                    b.Property<int?>("CurrencyConverterMethodId")
                        .HasColumnType("int");

                    b.HasKey("AccountId", "AccountIncludeId");

                    b.HasIndex("AccountIncludeId");

                    b.HasIndex("CurrencyConverterMethodId");

                    b.ToTable("AccountInclude");
                });

            modelBuilder.Entity("EFDataAccess.Models.AccountPeriod", b =>
                {
                    b.Property<int>("AccountPeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<float?>("Budget")
                        .HasColumnType("real");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("InitialDate")
                        .HasColumnType("datetime");

                    b.HasKey("AccountPeriodId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("AccountPeriod");
                });

            modelBuilder.Entity("EFDataAccess.Models.AccountType", b =>
                {
                    b.Property<int>("AccountTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountTypeName")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.HasKey("AccountTypeId");

                    b.ToTable("AccountType");
                });

            modelBuilder.Entity("EFDataAccess.Models.AmountType", b =>
                {
                    b.Property<int>("AmountTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmountSign")
                        .HasColumnType("int");

                    b.Property<string>("AmountTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("AmountTypeId");

                    b.HasIndex("AmountTypeName")
                        .IsUnique()
                        .HasName("AmountTypeName_unique");

                    b.ToTable("AmountType");
                });

            modelBuilder.Entity("EFDataAccess.Models.AppUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("PrimaryEmail")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("UserId")
                        .HasName("PK_User");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasName("AppUser_Unq_Username");

                    b.ToTable("AppUser");
                });

            modelBuilder.Entity("EFDataAccess.Models.AppUserOwner", b =>
                {
                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("UserId", "OwnerUserId")
                        .HasName("ClusteredIndex-20210912-193500")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("AppUserOwner");
                });

            modelBuilder.Entity("EFDataAccess.Models.ApplicationModule", b =>
                {
                    b.Property<int>("ApplicationModuleId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationModuleName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("ApplicationModuleId");

                    b.ToTable("ApplicationModule");
                });

            modelBuilder.Entity("EFDataAccess.Models.ApplicationResource", b =>
                {
                    b.Property<int>("ApplicationResourceId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationResourceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("ApplicationResourceId");

                    b.ToTable("ApplicationResource");
                });

            modelBuilder.Entity("EFDataAccess.Models.AutomaticTask", b =>
                {
                    b.Property<Guid>("AutomaticTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Days")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PeriodTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SpendTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TaskDescription")
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AutomaticTaskId");

                    b.HasIndex("AccountId");

                    b.HasIndex("AutomaticTaskId")
                        .IsUnique()
                        .HasName("AutomaticTask_Unq_AutomaticTaskId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("SpendTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("AutomaticTask");
                });

            modelBuilder.Entity("EFDataAccess.Models.BccrWebServiceIndicator", b =>
                {
                    b.Property<string>("EntityName")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("PurchaseCode")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SellCode")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("EntityName");

                    b.ToTable("BccrWebServiceIndicator");
                });

            modelBuilder.Entity("EFDataAccess.Models.Currency", b =>
                {
                    b.Property<int>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("CurrencyId");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("EFDataAccess.Models.CurrencyConverter", b =>
                {
                    b.Property<int>("CurrencyConverterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrencyIdOne")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyIdTwo")
                        .HasColumnType("int");

                    b.HasKey("CurrencyConverterId");

                    b.HasIndex("CurrencyIdOne");

                    b.HasIndex("CurrencyIdTwo");

                    b.ToTable("CurrencyConverter");
                });

            modelBuilder.Entity("EFDataAccess.Models.CurrencyConverterMethod", b =>
                {
                    b.Property<int>("CurrencyConverterMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrencyConverterId")
                        .HasColumnType("int");

                    b.Property<int?>("FinancialEntityId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("CurrencyConverterMethodId");

                    b.HasIndex("CurrencyConverterId");

                    b.HasIndex("FinancialEntityId");

                    b.ToTable("CurrencyConverterMethod");
                });

            modelBuilder.Entity("EFDataAccess.Models.DailyJob", b =>
                {
                    b.Property<int>("DailyJobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EventDesc")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("JobDate")
                        .HasColumnType("datetime");

                    b.HasKey("DailyJobId");

                    b.ToTable("DailyJob");
                });

            modelBuilder.Entity("EFDataAccess.Models.EntitiesSupported", b =>
                {
                    b.Property<int>("EntitiesSupportedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EntityName")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("EntitySearchKey")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.HasKey("EntitiesSupportedId");

                    b.ToTable("EntitiesSupported");
                });

            modelBuilder.Entity("EFDataAccess.Models.ExecutedTask", b =>
                {
                    b.Property<int>("ExecutedTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AutomaticTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExecuteDatetime")
                        .HasColumnType("datetime");

                    b.Property<Guid>("ExecutedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExecutionMsg")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int>("ExecutionStatus")
                        .HasColumnType("int");

                    b.HasKey("ExecutedTaskId");

                    b.HasIndex("AutomaticTaskId");

                    b.HasIndex("ExecutedByUserId");

                    b.HasIndex("ExecutedTaskId")
                        .IsUnique()
                        .HasName("ExecutedTask_Unq_ExecutedTaskId");

                    b.ToTable("ExecutedTask");
                });

            modelBuilder.Entity("EFDataAccess.Models.FinancialEntity", b =>
                {
                    b.Property<int>("FinancialEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("FinancialEntityId");

                    b.ToTable("FinancialEntity");
                });

            modelBuilder.Entity("EFDataAccess.Models.LoanRecord", b =>
                {
                    b.Property<int>("LoanRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LoanRecordName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("LoanRecordStatusId")
                        .HasColumnType("int");

                    b.Property<int>("SpendId")
                        .HasColumnType("int");

                    b.HasKey("LoanRecordId");

                    b.HasIndex("LoanRecordStatusId");

                    b.HasIndex("SpendId")
                        .IsUnique()
                        .HasName("LoanRecord_UQ_SpendId");

                    b.ToTable("LoanRecord");
                });

            modelBuilder.Entity("EFDataAccess.Models.LoanRecordStatus", b =>
                {
                    b.Property<int>("LoanRecordStatusId")
                        .HasColumnType("int");

                    b.Property<string>("LoanRecordStatusName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("LoanRecordStatusId");

                    b.ToTable("LoanRecordStatus");
                });

            modelBuilder.Entity("EFDataAccess.Models.LoanSpend", b =>
                {
                    b.Property<int>("LoanRecordId")
                        .HasColumnType("int");

                    b.Property<int>("SpendId")
                        .HasColumnType("int");

                    b.HasIndex("SpendId");

                    b.HasIndex("LoanRecordId", "SpendId")
                        .IsUnique()
                        .HasName("PK_LoanSpend")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("LoanSpend");
                });

            modelBuilder.Entity("EFDataAccess.Models.MethodsSupported", b =>
                {
                    b.Property<bool?>("Colones")
                        .HasColumnType("bit");

                    b.Property<int>("EntitiesSupportedId")
                        .HasColumnType("int");

                    b.Property<int>("MethodId")
                        .HasColumnType("int");

                    b.HasIndex("EntitiesSupportedId");

                    b.ToTable("MethodsSupported");
                });

            modelBuilder.Entity("EFDataAccess.Models.PeriodDefinition", b =>
                {
                    b.Property<int>("PeriodDefinitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CuttingDate")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("PeriodTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("Repetition")
                        .HasColumnType("int");

                    b.HasKey("PeriodDefinitionId");

                    b.HasIndex("PeriodTypeId");

                    b.ToTable("PeriodDefinition");
                });

            modelBuilder.Entity("EFDataAccess.Models.PeriodType", b =>
                {
                    b.Property<int>("PeriodTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("PeriodTypeId");

                    b.ToTable("PeriodType");
                });

            modelBuilder.Entity("EFDataAccess.Models.ResourceAccessLevel", b =>
                {
                    b.Property<int>("ResourceAccessLevelId")
                        .HasColumnType("int");

                    b.Property<string>("ResourceAccessLevelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("ResourceAccessLevelId");

                    b.ToTable("ResourceAccessLevel");
                });

            modelBuilder.Entity("EFDataAccess.Models.ResourceAction", b =>
                {
                    b.Property<int>("ResourceActionId")
                        .HasColumnType("int");

                    b.Property<string>("ResourceActionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("ResourceActionId");

                    b.ToTable("ResourceAction");
                });

            modelBuilder.Entity("EFDataAccess.Models.ResourceRequiredAccess", b =>
                {
                    b.Property<int?>("ApplicationModuleId")
                        .HasColumnType("int");

                    b.Property<int>("ApplicationResourceId")
                        .HasColumnType("int");

                    b.Property<int>("ResourceAccessLevelId")
                        .HasColumnType("int");

                    b.Property<int>("ResourceActionId")
                        .HasColumnType("int");

                    b.HasIndex("ApplicationModuleId");

                    b.HasIndex("ApplicationResourceId");

                    b.HasIndex("ResourceAccessLevelId");

                    b.HasIndex("ResourceActionId", "ApplicationResourceId", "ResourceAccessLevelId", "ApplicationModuleId")
                        .HasName("ClusteredIndex-20210912-193313")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("ResourceRequiredAccess");
                });

            modelBuilder.Entity("EFDataAccess.Models.SpFinanceSpendByAccountsListTable", b =>
                {
                    b.Property<int?>("AccountCurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("AccountCurrencySymbol")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<double?>("AccountGeneralBalance")
                        .HasColumnType("float");

                    b.Property<double?>("AccountGeneralBalanceToday")
                        .HasColumnType("float");

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("AccountName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<double?>("AccountPeriodBalance")
                        .HasColumnType("float");

                    b.Property<int?>("AccountPeriodId")
                        .HasColumnType("int");

                    b.Property<double?>("AccountPeriodSpent")
                        .HasColumnType("float");

                    b.Property<int?>("AmountType")
                        .HasColumnType("int");

                    b.Property<double?>("Budget")
                        .HasColumnType("float");

                    b.Property<double?>("Denominator")
                        .HasColumnType("float");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("InitialDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsLoan")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPending")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsValid")
                        .HasColumnType("bit");

                    b.Property<double?>("Numerator")
                        .HasColumnType("float");

                    b.Property<DateTime?>("SetPaymentDate")
                        .HasColumnType("datetime");

                    b.Property<double?>("SpendAmount")
                        .HasColumnType("float");

                    b.Property<string>("SpendCurrencyName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("SpendCurrencySymbol")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("SpendDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SpendDescription")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int?>("SpendId")
                        .HasColumnType("int");

                    b.Property<string>("SpendTypeName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasIndex("AccountId", "AccountPeriodId", "SpendId")
                        .HasName("ClusteredIndex-20210912-192807")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("SpFinanceSpendByAccountsListTable");
                });

            modelBuilder.Entity("EFDataAccess.Models.SpInTrxDef", b =>
                {
                    b.Property<Guid>("SpInTrxDefId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsSpendTrx")
                        .HasColumnType("bit");

                    b.HasKey("SpInTrxDefId");

                    b.HasIndex("SpInTrxDefId")
                        .IsUnique()
                        .HasName("SpInTrxDef_Unq_SpInTrxDefId");

                    b.ToTable("SpInTrxDef");
                });

            modelBuilder.Entity("EFDataAccess.Models.Spend", b =>
                {
                    b.Property<int>("SpendId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AmountCurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("AmountTypeId")
                        .HasColumnType("int");

                    b.Property<double?>("Denominator")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("IsPending")
                        .HasColumnType("bit");

                    b.Property<double?>("Numerator")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("((1))");

                    b.Property<double?>("OriginalAmount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("SetPaymentDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SpendDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SpendTypeId")
                        .HasColumnType("int");

                    b.HasKey("SpendId");

                    b.HasIndex("AmountCurrencyId");

                    b.HasIndex("AmountTypeId");

                    b.HasIndex("SpendTypeId");

                    b.ToTable("Spend");
                });

            modelBuilder.Entity("EFDataAccess.Models.SpendDependencies", b =>
                {
                    b.Property<int>("DependencySpendId")
                        .HasColumnType("int");

                    b.Property<int>("SpendId")
                        .HasColumnType("int");

                    b.HasIndex("DependencySpendId");

                    b.HasIndex("SpendId", "DependencySpendId")
                        .IsUnique()
                        .HasName("PK_SpendDependencies")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("SpendDependencies");
                });

            modelBuilder.Entity("EFDataAccess.Models.SpendOnPeriod", b =>
                {
                    b.Property<int>("SpendId")
                        .HasColumnType("int");

                    b.Property<int>("AccountPeriodId")
                        .HasColumnType("int");

                    b.Property<int?>("CurrencyConverterMethodId")
                        .HasColumnType("int");

                    b.Property<double?>("Denominator")
                        .HasColumnType("float");

                    b.Property<bool?>("IsOriginal")
                        .HasColumnType("bit");

                    b.Property<double?>("Numerator")
                        .HasColumnType("float");

                    b.Property<bool?>("PendingUpdate")
                        .HasColumnType("bit");

                    b.HasKey("SpendId", "AccountPeriodId");

                    b.HasIndex("AccountPeriodId");

                    b.HasIndex("CurrencyConverterMethodId");

                    b.ToTable("SpendOnPeriod");
                });

            modelBuilder.Entity("EFDataAccess.Models.SpendType", b =>
                {
                    b.Property<int>("SpendTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("SpendTypeId");

                    b.ToTable("SpendType");
                });

            modelBuilder.Entity("EFDataAccess.Models.TransferRecord", b =>
                {
                    b.Property<int>("TransferRecordId")
                        .HasColumnType("int");

                    b.Property<int>("SpendId")
                        .HasColumnType("int");

                    b.HasKey("TransferRecordId", "SpendId");

                    b.HasIndex("SpendId");

                    b.HasIndex("TransferRecordId", "SpendId")
                        .HasName("ClusteredIndex-20210912-192222")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("TransferRecord");
                });

            modelBuilder.Entity("EFDataAccess.Models.TransferTrxDef", b =>
                {
                    b.Property<Guid>("TransferTrxDefId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ToAccountId")
                        .HasColumnType("int");

                    b.HasKey("TransferTrxDefId");

                    b.HasIndex("ToAccountId");

                    b.HasIndex("TransferTrxDefId")
                        .IsUnique()
                        .HasName("TransferTrxDef_Unq_TransferTrxDefId");

                    b.ToTable("TransferTrxDef");
                });

            modelBuilder.Entity("EFDataAccess.Models.UserAssignedAccess", b =>
                {
                    b.Property<int>("ApplicationResourceId")
                        .HasColumnType("int");

                    b.Property<int>("ResourceAccessLevelId")
                        .HasColumnType("int");

                    b.Property<int>("ResourceActionId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("ApplicationResourceId");

                    b.HasIndex("ResourceAccessLevelId");

                    b.HasIndex("ResourceActionId");

                    b.HasIndex("UserId", "ResourceActionId", "ApplicationResourceId", "ResourceAccessLevelId")
                        .HasName("ClusteredIndex-20210912-193345")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("UserAssignedAccess");
                });

            modelBuilder.Entity("EFDataAccess.Models.UserBankSummaryAccount", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AccountId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBankSummaryAccount");
                });

            modelBuilder.Entity("EFDataAccess.Models.UserSpendType", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SpendTypeId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "SpendTypeId");

                    b.HasIndex("SpendTypeId");

                    b.ToTable("UserSpendType");
                });

            modelBuilder.Entity("EFDataAccess.Models.Account", b =>
                {
                    b.HasOne("EFDataAccess.Models.AccountGroup", "AccountGroup")
                        .WithMany("Account")
                        .HasForeignKey("AccountGroupId")
                        .HasConstraintName("Account_FK_AccountGroupId");

                    b.HasOne("EFDataAccess.Models.AccountType", "AccountType")
                        .WithMany("Account")
                        .HasForeignKey("AccountTypeId")
                        .HasConstraintName("Account_FK_AccountTypeId")
                        .IsRequired();

                    b.HasOne("EFDataAccess.Models.Currency", "Currency")
                        .WithMany("Account")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("Account_FK_CurrencyId");

                    b.HasOne("EFDataAccess.Models.SpendType", "DefaultSpendType")
                        .WithMany("Account")
                        .HasForeignKey("DefaultSpendTypeId")
                        .HasConstraintName("Account_FK_DefaultSpendTypeId");

                    b.HasOne("EFDataAccess.Models.FinancialEntity", "FinancialEntity")
                        .WithMany("Account")
                        .HasForeignKey("FinancialEntityId")
                        .HasConstraintName("Account_FK_FinancialEntityId");

                    b.HasOne("EFDataAccess.Models.PeriodDefinition", "PeriodDefinition")
                        .WithMany("Account")
                        .HasForeignKey("PeriodDefinitionId")
                        .HasConstraintName("Account_FK_PeriodDefinitionId")
                        .IsRequired();

                    b.HasOne("EFDataAccess.Models.AppUser", "User")
                        .WithMany("Account")
                        .HasForeignKey("UserId")
                        .HasConstraintName("Account_FK_UserId");
                });

            modelBuilder.Entity("EFDataAccess.Models.AccountGroup", b =>
                {
                    b.HasOne("EFDataAccess.Models.AppUser", "User")
                        .WithMany("AccountGroup")
                        .HasForeignKey("UserId")
                        .HasConstraintName("AccountGroup_FK_UserId");
                });

            modelBuilder.Entity("EFDataAccess.Models.AccountInclude", b =>
                {
                    b.HasOne("EFDataAccess.Models.Account", "Account")
                        .WithMany("AccountIncludeAccount")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("AccountInclude_FK_AccountId")
                        .IsRequired();

                    b.HasOne("EFDataAccess.Models.Account", "AccountIncludeNavigation")
                        .WithMany("AccountIncludeAccountIncludeNavigation")
                        .HasForeignKey("AccountIncludeId")
                        .HasConstraintName("AccountInclude_FK_AccountIncludeId")
                        .IsRequired();

                    b.HasOne("EFDataAccess.Models.CurrencyConverterMethod", "CurrencyConverterMethod")
                        .WithMany("AccountInclude")
                        .HasForeignKey("CurrencyConverterMethodId")
                        .HasConstraintName("AccountInclude_FK_CurrencyConverterMethodId");
                });

            modelBuilder.Entity("EFDataAccess.Models.AccountPeriod", b =>
                {
                    b.HasOne("EFDataAccess.Models.Account", "Account")
                        .WithMany("AccountPeriod")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("AccountPeriod_FK_AccountId");

                    b.HasOne("EFDataAccess.Models.Currency", "Currency")
                        .WithMany("AccountPeriod")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("AccountPeriod_FK_CurrencyId");
                });

            modelBuilder.Entity("EFDataAccess.Models.AppUser", b =>
                {
                    b.HasOne("EFDataAccess.Models.AppUser", "CreatedByUser")
                        .WithMany("InverseCreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .HasConstraintName("AppUser_FK_CreatedByUserId");
                });

            modelBuilder.Entity("EFDataAccess.Models.AppUserOwner", b =>
                {
                    b.HasOne("EFDataAccess.Models.AppUser", "OwnerUser")
                        .WithMany()
                        .HasForeignKey("OwnerUserId")
                        .HasConstraintName("AppUserOwner_FK_OwnerUserId")
                        .IsRequired();

                    b.HasOne("EFDataAccess.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("AppUserOwner_FK_UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("EFDataAccess.Models.AutomaticTask", b =>
                {
                    b.HasOne("EFDataAccess.Models.Account", "Account")
                        .WithMany("AutomaticTask")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("AutomaticTask_FK_AccountId")
                        .IsRequired();

                    b.HasOne("EFDataAccess.Models.Currency", "Currency")
                        .WithMany("AutomaticTask")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("AutomaticTask_FK_CurrencyId")
                        .IsRequired();

                    b.HasOne("EFDataAccess.Models.SpendType", "SpendType")
                        .WithMany("AutomaticTask")
                        .HasForeignKey("SpendTypeId")
                        .HasConstraintName("AutomaticTask_FK_SpendTypeId")
                        .IsRequired();

                    b.HasOne("EFDataAccess.Models.AppUser", "User")
                        .WithMany("AutomaticTask")
                        .HasForeignKey("UserId")
                        .HasConstraintName("AutomaticTask_FK_UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("EFDataAccess.Models.CurrencyConverter", b =>
                {
                    b.HasOne("EFDataAccess.Models.Currency", "CurrencyOne")
                        .WithMany()
                        .HasForeignKey("CurrencyIdOne")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EFDataAccess.Models.Currency", "CurrencyTwo")
                        .WithMany()
                        .HasForeignKey("CurrencyIdTwo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("EFDataAccess.Models.CurrencyConverterMethod", b =>
                {
                    b.HasOne("EFDataAccess.Models.CurrencyConverter", "CurrencyConverter")
                        .WithMany("CurrencyConverterMethod")
                        .HasForeignKey("CurrencyConverterId")
                        .HasConstraintName("CurrencyConverterMethod_FK_CurrencyIdOne")
                        .IsRequired();

                    b.HasOne("EFDataAccess.Models.FinancialEntity", "FinancialEntity")
                        .WithMany()
                        .HasForeignKey("FinancialEntityId");
                });

            modelBuilder.Entity("EFDataAccess.Models.ExecutedTask", b =>
                {
                    b.HasOne("EFDataAccess.Models.AutomaticTask", "AutomaticTask")
                        .WithMany("ExecutedTask")
                        .HasForeignKey("AutomaticTaskId")
                        .HasConstraintName("ExecutedTask_FK_AutomaticTaskId")
                        .IsRequired();

                    b.HasOne("EFDataAccess.Models.AppUser", "ExecutedByUser")
                        .WithMany("ExecutedTask")
                        .HasForeignKey("ExecutedByUserId")
                        .HasConstraintName("ExecutedTask_FK_UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("EFDataAccess.Models.LoanRecord", b =>
                {
                    b.HasOne("EFDataAccess.Models.LoanRecordStatus", "LoanRecordStatus")
                        .WithMany("LoanRecord")
                        .HasForeignKey("LoanRecordStatusId")
                        .HasConstraintName("LoanRecord_FK_LoanRecordStatusId")
                        .IsRequired();

                    b.HasOne("EFDataAccess.Models.Spend", "Spend")
                        .WithOne("LoanRecord")
                        .HasForeignKey("EFDataAccess.Models.LoanRecord", "SpendId")
                        .HasConstraintName("LoanRecord_FK_SpendId")
                        .IsRequired();
                });

            modelBuilder.Entity("EFDataAccess.Models.LoanSpend", b =>
                {
                    b.HasOne("EFDataAccess.Models.LoanRecord", "LoanRecord")
                        .WithMany()
                        .HasForeignKey("LoanRecordId")
                        .HasConstraintName("LoanSpend_FK_LoanRecordId")
                        .IsRequired();

                    b.HasOne("EFDataAccess.Models.Spend", "Spend")
                        .WithMany()
                        .HasForeignKey("SpendId")
                        .HasConstraintName("LoanSpend_FK_SpendId")
                        .IsRequired();
                });

            modelBuilder.Entity("EFDataAccess.Models.MethodsSupported", b =>
                {
                    b.HasOne("EFDataAccess.Models.EntitiesSupported", "EntitiesSupported")
                        .WithMany()
                        .HasForeignKey("EntitiesSupportedId")
                        .HasConstraintName("MethodsSupported_FK_EntitiesSupportedId")
                        .IsRequired();
                });

            modelBuilder.Entity("EFDataAccess.Models.PeriodDefinition", b =>
                {
                    b.HasOne("EFDataAccess.Models.PeriodType", "PeriodType")
                        .WithMany("PeriodDefinition")
                        .HasForeignKey("PeriodTypeId")
                        .HasConstraintName("PeriodDefinition_FK_PeriodTypeId")
                        .IsRequired();
                });

            modelBuilder.Entity("EFDataAccess.Models.ResourceRequiredAccess", b =>
                {
                    b.HasOne("EFDataAccess.Models.ApplicationModule", "ApplicationModule")
                        .WithMany()
                        .HasForeignKey("ApplicationModuleId")
                        .HasConstraintName("ResourceRequiredAccess_FK_ApplicationModuleId");

                    b.HasOne("EFDataAccess.Models.ApplicationResource", "ApplicationResource")
                        .WithMany()
                        .HasForeignKey("ApplicationResourceId")
                        .HasConstraintName("ResourceRequiredAccess_FK_ApplicationResourceId")
                        .IsRequired();

                    b.HasOne("EFDataAccess.Models.ResourceAccessLevel", "ResourceAccessLevel")
                        .WithMany()
                        .HasForeignKey("ResourceAccessLevelId")
                        .HasConstraintName("ResourceRequiredAccess_FK_ResourceAccessLevelId")
                        .IsRequired();

                    b.HasOne("EFDataAccess.Models.ResourceAction", "ResourceAction")
                        .WithMany()
                        .HasForeignKey("ResourceActionId")
                        .HasConstraintName("ResourceRequiredAccess_FK_ResourceActionId")
                        .IsRequired();
                });

            modelBuilder.Entity("EFDataAccess.Models.SpInTrxDef", b =>
                {
                    b.HasOne("EFDataAccess.Models.AutomaticTask", "SpInTrxDefNavigation")
                        .WithOne("SpInTrxDef")
                        .HasForeignKey("EFDataAccess.Models.SpInTrxDef", "SpInTrxDefId")
                        .HasConstraintName("SpInTrxDef_FK_AutomaticTaskId")
                        .IsRequired();
                });

            modelBuilder.Entity("EFDataAccess.Models.Spend", b =>
                {
                    b.HasOne("EFDataAccess.Models.Currency", "AmountCurrency")
                        .WithMany("Spend")
                        .HasForeignKey("AmountCurrencyId")
                        .HasConstraintName("Spend_FK_AmountCurrencyId");

                    b.HasOne("EFDataAccess.Models.AmountType", "AmountType")
                        .WithMany("Spend")
                        .HasForeignKey("AmountTypeId")
                        .HasConstraintName("Spend_FK_AmountTypeId")
                        .IsRequired();

                    b.HasOne("EFDataAccess.Models.SpendType", "SpendType")
                        .WithMany("Spend")
                        .HasForeignKey("SpendTypeId")
                        .HasConstraintName("Spend_FK_SpendTypeId");
                });

            modelBuilder.Entity("EFDataAccess.Models.SpendDependencies", b =>
                {
                    b.HasOne("EFDataAccess.Models.Spend", "DependencySpend")
                        .WithMany()
                        .HasForeignKey("DependencySpendId")
                        .HasConstraintName("SpendDependencies_Dep_FK_SpendId")
                        .IsRequired();

                    b.HasOne("EFDataAccess.Models.Spend", "Spend")
                        .WithMany()
                        .HasForeignKey("SpendId")
                        .HasConstraintName("SpendDependencies_FK_SpendId")
                        .IsRequired();
                });

            modelBuilder.Entity("EFDataAccess.Models.SpendOnPeriod", b =>
                {
                    b.HasOne("EFDataAccess.Models.AccountPeriod", "AccountPeriod")
                        .WithMany("SpendOnPeriod")
                        .HasForeignKey("AccountPeriodId")
                        .HasConstraintName("SpendOnPeriod_FK_AccountPeriodId")
                        .IsRequired();

                    b.HasOne("EFDataAccess.Models.CurrencyConverterMethod", "CurrencyConverterMethod")
                        .WithMany("SpendOnPeriod")
                        .HasForeignKey("CurrencyConverterMethodId")
                        .HasConstraintName("SpendOnPeriod_FK_CurrencyConverterMethodId");

                    b.HasOne("EFDataAccess.Models.Spend", "Spend")
                        .WithMany("SpendOnPeriod")
                        .HasForeignKey("SpendId")
                        .HasConstraintName("SpendOnPeriod_FK_SpendId")
                        .IsRequired();
                });

            modelBuilder.Entity("EFDataAccess.Models.TransferRecord", b =>
                {
                    b.HasOne("EFDataAccess.Models.Spend", "Spend")
                        .WithMany()
                        .HasForeignKey("SpendId")
                        .HasConstraintName("TransferRecord_FK_SpendId")
                        .IsRequired();
                });

            modelBuilder.Entity("EFDataAccess.Models.TransferTrxDef", b =>
                {
                    b.HasOne("EFDataAccess.Models.Account", "ToAccount")
                        .WithMany("TransferTrxDef")
                        .HasForeignKey("ToAccountId")
                        .HasConstraintName("TransferTrxDef_FK_ToAccountId")
                        .IsRequired();

                    b.HasOne("EFDataAccess.Models.AutomaticTask", "TransferTrxDefNavigation")
                        .WithOne("TransferTrxDef")
                        .HasForeignKey("EFDataAccess.Models.TransferTrxDef", "TransferTrxDefId")
                        .HasConstraintName("TransferTrxDef_FK_AutomaticTaskId")
                        .IsRequired();
                });

            modelBuilder.Entity("EFDataAccess.Models.UserAssignedAccess", b =>
                {
                    b.HasOne("EFDataAccess.Models.ApplicationResource", "ApplicationResource")
                        .WithMany()
                        .HasForeignKey("ApplicationResourceId")
                        .HasConstraintName("UserAssignedAccess_FK_ApplicationResourceId")
                        .IsRequired();

                    b.HasOne("EFDataAccess.Models.ResourceAccessLevel", "ResourceAccessLevel")
                        .WithMany()
                        .HasForeignKey("ResourceAccessLevelId")
                        .HasConstraintName("UserAssignedAccess_FK_ResourceAccessLevelId")
                        .IsRequired();

                    b.HasOne("EFDataAccess.Models.ResourceAction", "ResourceAction")
                        .WithMany()
                        .HasForeignKey("ResourceActionId")
                        .HasConstraintName("UserAssignedAccess_FK_ResourceActionId")
                        .IsRequired();

                    b.HasOne("EFDataAccess.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("UserAssignedAccess_FK_UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("EFDataAccess.Models.UserBankSummaryAccount", b =>
                {
                    b.HasOne("EFDataAccess.Models.Account", "Account")
                        .WithMany("UserBankSummaryAccount")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("UserBankSummaryAccount_FK_AccountId")
                        .IsRequired();

                    b.HasOne("EFDataAccess.Models.AppUser", "User")
                        .WithMany("UserBankSummaryAccount")
                        .HasForeignKey("UserId")
                        .HasConstraintName("UserBankSummaryAccount_FK_UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("EFDataAccess.Models.UserSpendType", b =>
                {
                    b.HasOne("EFDataAccess.Models.SpendType", "SpendType")
                        .WithMany("UserSpendType")
                        .HasForeignKey("SpendTypeId")
                        .HasConstraintName("UserSpendType_FK_SpendTypeId")
                        .IsRequired();

                    b.HasOne("EFDataAccess.Models.AppUser", "User")
                        .WithMany("UserSpendType")
                        .HasForeignKey("UserId")
                        .HasConstraintName("UserSpendType_FK_UserId")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
